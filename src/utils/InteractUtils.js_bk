import interact from 'interactjs' //http://interactjs.io/

let transformProp = 'transform',
	transitionProp = 'transition';
//transform和transition的兼容性
if(document && document.body && document.body.style) {
	transformProp = 'transform' in document.body.style ?
		'transform' : 'webkitTransform' in document.body.style ?
		'webkitTransform' : 'mozTransform' in document.body.style ?
		'mozTransform' : 'oTransform' in document.body.style ?
		'oTransform' : 'msTransform' in document.body.style ?
		'msTransform' : null;
	transitionProp = 'transition' in document.body.style ?
		'transition' : 'webkitTransition' in document.body.style ?
		'webkitTransition' : 'mozTransition' in document.body.style ?
		'mozTransition' : 'oTransition' in document.body.style ?
		'oTransition' : 'msTransition' in document.body.style ?
		'msTransition' : null;
	if(!transformProp || !transitionProp) {
		console.log('浏览器版本太低了? 不支持transform和transition，升级下吧！')
	}
}
var totalDX = 0;
var totalDY = 0;
var totalDWidth = 0;
var totalDHeight = 0;

/****
 * 设置元素可拖拽
 * @param {Object} el
 */
function drag(el, options, callback) {

	options = options || {};
	let obj = {
		onstart: function(event) {
			callback(true);
			totalDX = 0;
			totalDY = 0;
			console.log('drag-onstart')
			console.log(event.pageX + "," + event.pageY);
			console.log(event.x0 + "," + event.y0);
			console.log(event.clientX0 + "," + event.clientY0);
			let target = event.target;
			event.interaction.x = parseInt(target.getAttribute('data-x'), 10) || 0;
			event.interaction.y = parseInt(target.getAttribute('data-y'), 10) || 0;
		},
		onmove: function(event) {
			console.log('drag-onmove')
			//			console.log('drag');
			//			console.log(event);
			let target = event.target;
			event.interaction.x += event.dx;
			event.interaction.y += event.dy;
			console.log(event.dx + "," + event.dy);
			totalDX += event.dx;
			totalDY += event.dy;
			transformProp = false;//必需
			if(transformProp) {
				event.target.style[transformProp] =
					'translate(' + event.interaction.x + 'px, ' + event.interaction.y + 'px)';
			} else {
				event.target.style.position = 'absolute';
				event.target.style.left = event.interaction.x + 'px';
				event.target.style.top = event.interaction.y + 'px';
			}
			//target.innerHTML = event.interaction.x + "," + event.interaction.y;

		},
		onend: function(event) {
			event.target.setAttribute('data-x', event.interaction.x);
			event.target.setAttribute('data-y', event.interaction.y);
			//callback();
			var ele = document.querySelector(el);
			//			console.log(ele.offsetLeft+','+ele.offsetTop);
			//			console.log('drag');
			//			console.log(event);
			console.log('drag-onend')
			console.log(event.pageX + "," + event.pageY);
			console.log(event.x0 + "," + event.y0);
			console.log(event.clientX0 + "," + event.clientY0);
			callback({
				dx: totalDX,
				dy: totalDY
			});
			totalDX = 0;
			totalDY = 0;
			//				event.stopPropagation()
		},
		...options
	};
	interact(el).draggable(obj)

}

function resize(el, options, callback) {
	options = options || {};
	let obj = {
		onstart: function(event) {
			console.log('resize-onstart')
			totalDWidth = 0;
			totalDHeight = 0;
		},
		onmove: function(event) {
			console.log('resize-onmove')
			var target = event.target,
				x = (parseFloat(target.getAttribute('data-x')) || 0),
				y = (parseFloat(target.getAttribute('data-y')) || 0);

			// update the element's style
			target.style.width = event.rect.width + 'px';
			target.style.height = event.rect.height + 'px';

			// translate when resizing from top or left edges
			x += event.deltaRect.left;
			y += event.deltaRect.top;
			console.log(event.deltaRect);
			console.log(event.rect);
			totalDWidth += event.deltaRect.width;
			totalDHeight += event.deltaRect.height;
		},
		onend: function(event) {
			console.log('resize-onend')
			callback({
				dwdith: totalDWidth,
				dhight: totalDHeight
			});
			totalDWidth=0;
			totalDHeight=0
		},
		...options
	};
	interact(el).resizable(obj);
}
export {
	drag as interactDrag,
	resize as interactResize
}